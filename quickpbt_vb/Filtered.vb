' Domain Under Test
Imports Dated = System.DateTimeOffset
Imports Zoned = System.TimeZoneInfo

''' <summary>
''' demonstrates a few different ways to filter inputs to a test
''' </summary>
Public NotInheritable Class Filtered
  Shared ReadOnly ZoneName As String = Platform.Swap(
    win   := Function() "Eastern Standard Time",
    mac   := Function() "America/New_York",
    unix  := Function() As String
                throw New PlatformNotSupportedException()
              End Function
  )

  ''' <summary>
  ''' naive test fails (because the range of inputs is too broad)
  ''' </summary>
  <[Property]>
  Public Function DaylightSavingsTestOracleNaive(anyDate As Dated) As Boolean
    '**
    ' NOTE: this test also demonstrates the common pattern of the
    '        "test oracle" ... using a known-good implementation of
    '        something to test out an alternate, equivalent implementation
    '**
    Dim eastern   = Zoned.FindSystemTimeZoneById(ZoneName)
    Dim eastDate  = Zoned.ConvertTime(anyDate, eastern)

    Return Zone.InUnitedStatesDaylightTime(eastDate) = eastern.IsDaylightSavingTime(eastDate)
  End Function

  ''' <summary>
  ''' uses a conditional property to ensure only valid inputs are used
  ''' </summary>
  <[Property]>
  Public Function DaylightSavingsTestOracleConditional(anyDate As Dated) As [Property]
    Dim eastern   = Zoned.FindSystemTimeZoneById(ZoneName)
    Dim eastDate  = Zoned.ConvertTime(anyDate, eastern)

    Dim check = Function() Zone.InUnitedStatesDaylightTime(eastDate)

    Return check().When(anyDate.Year >= 2007 AndAlso eastern.IsDaylightSavingTime(eastDate))
  End Function

  ''' <summary>
  ''' instead of a conditional property, here we use a IArbitrary with a "universal quantifier"
  ''' </summary>
  <[Property]>
  Public Function ZoneIsUnchangedThroughRoundTripSerialization() As [Property]
    ' define a test whose inputs are NOT normally generated by FsCheck
    Dim check = Function(anyZone As Zoned)
      If Platform.IsWin Then
        Dim deflated = anyZone.ToSerializedString()
        Dim inflated = Zoned.FromSerializedString(deflated)
        return anyZone.Equals(inflated)
        '**
        '  NOTE: this test also demonstrates another variation on the "inversion" pattern
        '**
      End If
      Return True
      '**
      '  NOTE: there is a known issue with deseriazing TimeZoneInfo on non-Windows OSes
      '**
    End Function

    ' arbitrary generators can be easily defined
    Dim zones = Gen.Elements(from z in Zoned.GetSystemTimeZones() select z).ToArbitrary()

    ' "for all" zones, run a test...
    return Prop.ForAll(zones, check)
  End Function
End Class
